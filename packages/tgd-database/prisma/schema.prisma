// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output = "../node_modules/.prisma/client"
  //output = "../../node_modules/.prisma/client"
  //output = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./docs"
}

model CentralizedBarcode {
  id         Int        @id @default(autoincrement()) @map(name: "id")
  barcode    String     @map(name: "barcode")
  entityType EntityType @map(name: "entity_type")
  entityId   Int        @map(name: "entity_id")

  libraryItems   LibraryItem[]
  attendees      Attendee[]
  playToWinItems PlayToWinItem[]

  @@unique([barcode])
  @@unique([entityType, entityId])
  @@map("centralized_barcodes")
}

// Define the Enum type
enum EntityType {
  Attendee
  LibraryItem
  PlayToWinItem
}

model Convention {
  id                         Int       @id @default(autoincrement()) @map(name: "id")
  name                       String    @unique @map(name: "name")
  extraHoursStartDateTimeUtc String?   @map(name: "extra_hours_start_date_time_iso_utc")
  startDateTimeUtc           String?   @map(name: "start_date_time_iso_utc")
  endDateTimeUtc             String?   @map(name: "end_date_time_iso_utc")
  updatedAtUtc               String    @map(name: "date_updated_utc")
  isCancelled                Boolean   @default(false) @map(name: "is_cancelled")
  venueId                    Int?      @map(name: "venue_id")
  venue                      Venue?    @relation(fields: [venueId], references: [id])

  PlayToWinGames PlayToWinItem[]
  Attendees      Attendee[]

  @@map("conventions")
}

model Venue {
  id            Int      @id @default(autoincrement()) @map(name: "id")
  name          String   @unique @map(name: "name")
  streetNumber  String   @map(name: "street_number")
  streetName    String   @map(name: "street_name")
  city          String   @map(name: "city")
  stateProvince String   @map(name: "state_province")
  postalCode    String   @map(name: "postal_code")
  latitude      Decimal? @map(name: "latitude")
  longitude     Decimal? @map(name: "longitude")

  convention Convention[]

  @@map("venues")
}

// Could be Accessory / Expansion / Board Game / ... w/e else
model BoardGameGeekThing {
  id                 Int     @id @unique @map(name: "bgg_id")
  itemName           String  @map(name: "bgg_item_name")
  type               String  @map(name: "item_type")
  description        String? @map(name: "description")
  thumbnailUrl       String? @map(name: "thumbnail_url")
  imageUrl           String? @map(name: "full_image_url")
  yearPublished      Int?    @map(name: "year_published")
  playingTimeMinutes Int?    @map(name: "playing_time_min")
  minimumPlayerCount Int?    @map(name: "min_player_count")
  maximumPlayerCount Int?    @map(name: "max_player_count")
  minimumPlayerAge   Int?    @map(name: "min_player_age")

  ranking              Int?     @map(name: "bgg_game_ranking")
  votedBestPlayerCount Int?     @map(name: "best_player_count")
  averageUserRating    Decimal? @map(name: "bgg_average_rating") @db.Decimal(5, 3)
  complexityRating     Decimal? @map(name: "bgg_weight_rating") @db.Decimal(5, 3)

  libraryItems        LibraryItem[]
  libraryItemContains AdditionalLibraryItemContent[]
  playToWinGames      PlayToWinItem[]
  gameMechanics       GameMechanic[]

  @@map("board_game_geek_items")
}

model Mechanic {
  id   Int    @id @map(name: "bgg_mechanic_id")
  name String @unique @map(name: "name")

  gameMechanics GameMechanic[]

  @@map("bgg_mechanics")
}

model GameMechanic {
  boardGameGeekId    Int                @map(name: "bgg_id")
  boardGameGeekThing BoardGameGeekThing @relation(fields: [boardGameGeekId], references: [id])
  mechanicId         Int                @map(name: "bgg_mechanic_id")
  mechanic           Mechanic           @relation(fields: [mechanicId], references: [id])

  @@unique([boardGameGeekId, mechanicId])
  @@index([boardGameGeekId, mechanicId])
  @@map("game_mechanics")
}

model LibraryItem {
  id                     Int                            @id @default(autoincrement()) @map(name: "id")
  boardGameGeekId        Int                            @map(name: "bgg_id")
  boardGameGeekThing     BoardGameGeekThing             @relation(fields: [boardGameGeekId], references: [id])
  barcode                String                         @map(name: "barcode")
  alias                  String?                        @map(name: "alias")
  owner                  String                         @map(name: "owner")
  isHidden               Boolean                        @map(name: "is_hidden")
  isCheckedOut           Boolean                        @map(name: "is_checked_out")
  totalCheckedOutMinutes Int                            @default(0) @map(name: "minutes_checked_out")
  dateAddedUtc           String                         @map(name: "date_added_utc")
  updatedAtUtc           String                         @map(name: "date_updated_utc")
  checkOutEvents         LibraryCheckoutEvent[]
  additionalBoxContent   AdditionalLibraryItemContent[]
  centralizedBarcode     CentralizedBarcode             @relation(fields: [barcode], references: [barcode])

  @@unique([barcode])
  @@map("library_items")
}

// Naming gets weird if it's chips or something, but if it's an expansion it makes sense
model AdditionalLibraryItemContent {
  libraryItemId   Int         @map(name: "library_item_id")
  libraryItem     LibraryItem @relation(fields: [libraryItemId], references: [id])
  boardGameGeekId Int         @map(name: "bgg_id")

  additionalBoxContent BoardGameGeekThing @relation(fields: [boardGameGeekId], references: [id])

  @@unique([libraryItemId, boardGameGeekId])
  @@index([libraryItemId, boardGameGeekId])
  @@map("library_item_contents")
}

// Add Library Item Expansions

model Person {
  id            Int        @id @default(autoincrement()) @map(name: "id")
  firstName      String     @map(name: "first_name")
  preferredName String?    @map(name: "preferred_name")
  lastName      String     @map(name: "last_name")
  email         String?    @map(name: "email")
  phoneNumber   String?    @map(name: "phone_number")
  attendee      Attendee[]

  @@map("people")
}

model PlayToWinItem {
  id                 Int                 @id @default(autoincrement()) @map(name: "id")
  barcode            String              @map(name: "barcode")
  boardGameGeekId    Int?                @map(name: "bgg_id")
  boardGameGeekThing BoardGameGeekThing? @relation(fields: [boardGameGeekId], references: [id])
  gameName           String?             @map(name: "game_name")
  conventionId       Int                 @map(name: "convention_id")
  convention         Convention          @relation(fields: [conventionId], references: [id])
  isHidden           Boolean             @map(name: "is_hidden")
  totalTimesPlayed   Int                 @default(0) @map(name: "total_played")
  dateAddedUtc       String              @map(name: "date_added_utc")
  centralizedBarcode CentralizedBarcode  @relation(fields: [barcode], references: [barcode])

  playToWinEvents    PlayToWinEvent[]

  // is_checked_out?
  @@unique([barcode])
  @@map("play_to_win_items")
}

model LibraryCheckoutEvent {
  id                        String      @id @default(cuid()) @map(name: "id")
  libraryCopyId             Int         @map(name: "library_item_id")
  library                   LibraryItem @relation(fields: [libraryCopyId], references: [id])
  attendeeId                Int         @map(name: "checkout_attendee_id")
  attendee                  Attendee    @relation(fields: [attendeeId], references: [id])
  checkedOutTimeUtcIso      String      @map("checked_out_time_utc")
  checkedInTimeUtcIso       String?     @map("checked_in_time_utc")

  @@map("library_checkout_events")
}

model PlayToWinEvent {
  id                        String        @id @default(cuid()) @map(name: "id")
  playToWinItemId           Int           @map(name: "play_to_win_item_id")
  playToWinItem             PlayToWinItem @relation(fields: [playToWinItemId], references: [id])
  attendeeId                Int           @map(name: "attendee_id")
  attendee                  Attendee      @relation(fields: [attendeeId], references: [id])
  checkedInTimeUtcIso       String        @map("checked_in_time_utc")

  @@map("play_to_win_events")  
}

model Attendee {
  id             Int        @id @default(autoincrement()) @map(name: "id")
  personId       Int        @map(name: "person_id")
  barcode        String     @map(name: "barcode")
  person         Person     @relation(fields: [personId], references: [id])
  isCheckedIn    Boolean    @default(false) @map(name: "is_checked_in")
  conventionId   Int        @map(name: "convention_id")
  convention     Convention @relation(fields: [conventionId], references: [id])
  checkedInUtc   String?    @map(name: "checked_in_utc")
  isVolunteer    Boolean    @default(false) @map(name: "is_volunteer")
  idTgdOrganizer Boolean    @default(false) @map(name: "is_organizer")

  centralizedBarcode CentralizedBarcode    @relation(fields: [barcode], references: [barcode])
  checkOutEvents     LibraryCheckoutEvent[]
  playToWinEvents    PlayToWinEvent[]

  @@unique([personId, conventionId])
  @@map("attendees")
}
